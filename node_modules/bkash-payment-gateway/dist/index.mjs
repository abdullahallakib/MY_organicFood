// src/utils/diffSeconds.ts
function diffSeconds(date) {
  const diff = Date.now() - date;
  return diff / 1e3;
}

// src/utils/request.ts
import fetch from "node-fetch";
import AbortController from "abort-controller";

// src/exceptions/bkashException.ts
var BkashException = class extends Error {
  constructor(message) {
    super(message);
    this.name = "BkashException";
    this.stack = this.stack ?? new Error().stack;
  }
};

// src/utils/request.ts
async function get(url, additionalHeaders) {
  const response = await fetch(url, {
    method: "GET",
    headers: {
      "content-type": "application/json",
      Accept: "application/json",
      ...additionalHeaders
    }
  });
  const parsed = await response.json();
  if (parsed.errorMessage)
    throw new BkashException(parsed.errorMessage);
  return parsed;
}
async function post(url, payload = {}, additionalHeaders) {
  const controller = new AbortController();
  const timeout = setTimeout(() => {
    controller.abort();
  }, 30 * 1e3);
  const response = await fetch(url, {
    headers: {
      "content-type": "application/json",
      Accept: "application/json",
      ...additionalHeaders
    },
    body: JSON.stringify(payload),
    method: "POST",
    signal: controller.signal
  });
  clearTimeout(timeout);
  const parsed = await response.json();
  if (parsed.errorMessage)
    throw new BkashException(parsed.errorMessage);
  return parsed;
}

// src/index.ts
var BkashGateway = class {
  constructor(config) {
    this.createPayment = async (paymentDetails) => {
      const { amount, intent, orderID, merchantAssociationInfo } = paymentDetails;
      const payload = {
        amount,
        intent,
        currency: "BDT",
        merchantInvoiceNumber: orderID,
        merchantAssociationInfo: merchantAssociationInfo ?? ""
      };
      const headers = await this.createTokenHeader();
      return await post(`${this.baseURL}/checkout/payment/create`, payload, headers);
    };
    this.executePayment = async (paymentID) => {
      try {
        const headers = await this.createTokenHeader();
        return await post(
          `${this.baseURL}/checkout/payment/execute/${paymentID}`,
          void 0,
          headers
        );
      } catch (error) {
        if (error instanceof BkashException) {
          throw error;
        }
        throw new BkashException("Timeout of 30 Seconds Exceeded While Executing Payment, Please Query the Payment");
      }
    };
    this.queryPayment = async (paymentID) => {
      const headers = await this.createTokenHeader();
      return await get(`${this.baseURL}/checkout/payment/query/${paymentID}`, headers);
    };
    this.searchTransaction = async (trxID) => {
      return await get(
        `${this.baseURL}/checkout/payment/query/${trxID}`,
        await this.createTokenHeader()
      );
    };
    this.refundTransaction = async (refundInfo) => {
      return post(
        `${this.baseURL}/checkout/payment/refund`,
        refundInfo,
        await this.createTokenHeader()
      );
    };
    this.refundStatus = async (trxID, paymentID) => {
      return await post(
        `${this.baseURL}/checkout/payment/refund`,
        { trxID, paymentID },
        await this.createTokenHeader()
      );
    };
    this.createTokenHeader = async () => {
      const token = await this.getToken();
      return {
        authorization: token,
        "x-app-key": this.key
      };
    };
    this.getToken = async () => {
      if (!this.token) {
        const { id_token: id_token2, refresh_token: refresh_token2, msg: msg2, status: status2 } = await this.getInitialToken();
        if (status2 && msg2)
          throw new BkashException(msg2);
        this.token = id_token2;
        this.refreshToken = refresh_token2;
        this.tokenIssueTime = Date.now();
        return this.token;
      }
      const diff = diffSeconds(this.tokenIssueTime);
      if (diff < 3500) {
        return this.token;
      }
      const { id_token, refresh_token, msg, status } = await this.newToken(this.refreshToken);
      if (status && msg)
        throw new BkashException(msg);
      this.token = id_token;
      this.refreshToken = refresh_token;
      this.tokenIssueTime = Date.now();
      return this.token;
    };
    this.getInitialToken = async () => {
      const response = await post(
        `${this.baseURL}/checkout/token/grant`,
        {
          app_key: this.key,
          app_secret: this.secret
        },
        this.headers
      );
      if (response.status === "fail")
        throw new BkashException("Invalid API Credentials Provided");
      return response;
    };
    this.newToken = (refresh) => {
      return post(
        `${this.baseURL}/checkout/token/refresh`,
        {
          app_key: this.key,
          app_secret: this.secret,
          refresh_token: refresh
        },
        this.headers
      );
    };
    this.validateConfig = (config) => {
      const { baseURL, key, password, secret, username } = config;
      if (!baseURL || baseURL === "")
        throw new BkashException("Invalid BaseURL provided");
      if (!key || key === "")
        throw new BkashException("Invalid API Key provided");
      if (!secret || secret === "")
        throw new BkashException("Invalid API secret provided");
      if (!username || username === "")
        throw new BkashException("Invalid API username provided");
      if (!password || password === "")
        throw new BkashException("Invalid API password provided");
    };
    if (Object.keys(config).length !== 5)
      throw new BkashException("Invalid Configuration provided");
    this.validateConfig(config);
    const { baseURL, key, password, secret, username } = config;
    this.baseURL = baseURL;
    this.key = key;
    this.secret = secret;
    this.headers = {
      username,
      password
    };
  }
};
var src_default = BkashGateway;
export {
  BkashGateway,
  src_default as default
};
